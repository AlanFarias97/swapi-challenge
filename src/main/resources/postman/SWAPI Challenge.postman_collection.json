{
	"info": {
		"_postman_id": "9772aa11-f0a2-4aaa-8753-e078e358e9b3",
		"name": "SWAPI Challenge",
		"description": "Colección cero-config para probar la API del SWAPI Challenge (Java 8 + Spring Boot 2.7 + GraphQL). Incluye login automático, Bearer token y X-Correlation-Id a nivel colección.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21309259"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Auth - Login (manual)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Correlation-Id",
								"value": "{{cid}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"{{username}}\", \"password\": \"{{password}}\"}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth - Register (manual)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Correlation-Id",
								"value": "{{cid}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"{{username}}\", \"password\": \"{{password}}\"}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "People",
			"item": [
				{
					"name": "GraphQL - People",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200', () => pm.response.to.have.status(200));",
									"pm.test('Sin errores GraphQL', () => pm.expect(pm.response.json().errors).to.be.undefined);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Correlation-Id",
								"value": "{{cid}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($page:Int,$size:Int,$name:String,$id:ID){ people(page:$page,size:$size,name:$name,id:$id){ totalPages totalRecords results{ id name } } }",
								"variables": "{\n  \"page\": 1,\n  \"size\": 10,\n  \"name\": null,\n  \"id\": null\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Films",
			"item": [
				{
					"name": "GraphQL - Films",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200', () => pm.response.to.have.status(200));",
									"pm.test('Sin errores GraphQL', () => pm.expect(pm.response.json().errors).to.be.undefined);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Correlation-Id",
								"value": "{{cid}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($page:Int,$size:Int,$name:String,$id:ID){ films(page:$page,size:$size,name:$name,id:$id){ totalPages totalRecords results{ id title releaseDate } } }",
								"variables": "{\n  \"page\": 1,\n  \"size\": 10,\n  \"name\": null,\n  \"id\": null\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Starships",
			"item": [
				{
					"name": "GraphQL - Starships",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200', () => pm.response.to.have.status(200));",
									"pm.test('Sin errores GraphQL', () => pm.expect(pm.response.json().errors).to.be.undefined);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Correlation-Id",
								"value": "{{cid}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($page:Int,$size:Int,$name:String,$id:ID){ starships(page:$page,size:$size,name:$name,id:$id){ totalPages totalRecords results{ id name model } } }",
								"variables": "{\n  \"page\": 1,\n  \"size\": 10,\n  \"name\": null,\n  \"id\": null\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vehicle",
			"item": [
				{
					"name": "GraphQL - Vehicle",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200', () => pm.response.to.have.status(200));",
									"pm.test('Sin errores GraphQL', () => pm.expect(pm.response.json().errors).to.be.undefined);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Correlation-Id",
								"value": "{{cid}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($page:Int,$size:Int,$name:String,$id:ID){ vehicles(page:$page,size:$size,name:$name,id:$id){ totalPages totalRecords results{ id name model } } }",
								"variables": "{\n  \"page\": 1,\n  \"size\": 10,\n  \"name\": null,\n  \"id\": null\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Actuator",
			"item": [
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200', () => pm.response.to.have.status(200));",
									"pm.test('JSON health', () => pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Correlation-Id",
								"value": "{{cid}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/actuator/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const now = Date.now();",
					"const base = pm.collectionVariables.get('base_url') || 'http://localhost:8080';",
					"const username = pm.collectionVariables.get('username') || 'demo';",
					"const password = pm.collectionVariables.get('password') || 'demo';",
					"// Correlation-Id",
					"(function ensureCid(){",
					"  let cid = pm.collectionVariables.get('cid');",
					"  if (!cid) {",
					"    cid = (Date.now().toString(36) + Math.random().toString(36).slice(2));",
					"    pm.collectionVariables.set('cid', cid);",
					"  }",
					"  pm.request.headers.upsert({ key: 'X-Correlation-Id', value: cid });",
					"})();",
					"const urlStr = pm.request.url.toString();",
					"const isAuthPath = urlStr.includes('/auth/login') || urlStr.includes('/auth/register');",
					"const token = pm.collectionVariables.get('token');",
					"const exp = Number(pm.collectionVariables.get('token_exp') || 0);",
					"const stillValid = token && (now < (exp - 60 * 1000));",
					"if (stillValid || isAuthPath) {",
					"  if (token) { pm.request.headers.upsert({ key: 'Authorization', value: 'Bearer ' + token }); }",
					"  return;",
					"}",
					"function setTokenFromResponse(res) {",
					"  try {",
					"    const json = res.json();",
					"    if (json && json.token) {",
					"      pm.collectionVariables.set('token', json.token);",
					"      pm.collectionVariables.set('token_exp', json.expiresAtEpochMillis || (Date.now() + 55*60*1000));",
					"      pm.request.headers.upsert({ key: 'Authorization', value: 'Bearer ' + json.token });",
					"      return true;",
					"    }",
					"  } catch (e) {}",
					"  return false;",
					"}",
					"function doLogin(done) {",
					"  pm.sendRequest({",
					"    url: base + '/auth/login',",
					"    method: 'POST',",
					"    header: { 'Content-Type': 'application/json' },",
					"    body: { mode: 'raw', raw: JSON.stringify({ username, password }) }",
					"  }, (err, res) => {",
					"    if (!err && res && res.code >= 200 && res.code < 300 && setTokenFromResponse(res)) return done();",
					"    pm.sendRequest({",
					"      url: base + '/auth/register',",
					"      method: 'POST',",
					"      header: { 'Content-Type': 'application/json' },",
					"      body: { mode: 'raw', raw: JSON.stringify({ username, password }) }",
					"    }, () => {",
					"      pm.sendRequest({",
					"        url: base + '/auth/login',",
					"        method: 'POST',",
					"        header: { 'Content-Type': 'application/json' },",
					"        body: { mode: 'raw', raw: JSON.stringify({ username, password }) }",
					"      }, (_e2, r2) => { setTokenFromResponse(r2); done(); });",
					"    });",
					"  });",
					"}",
					"postman.setNextRequest(null);",
					"doLogin(() => {});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://swapi-challenge-4xet.onrender.com"
		},
		{
			"key": "username",
			"value": "demo"
		},
		{
			"key": "password",
			"value": "demo"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "token_exp",
			"value": ""
		},
		{
			"key": "cid",
			"value": ""
		}
	]
}